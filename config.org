#+title: Emacs configuration using straight.el
#+options: toc:nil date:nil author:nil

#+latex_header: \usepackage{listings}
#+latex_header: \lstdefinestyle{source}{basicstyle=\footnotesize\ttfamily,frame=tb}
#+latex_header: \lstset{style=source}
#+latex_header: \usepackage[margin=2.5cm]{geometry}

#+startup: overview

* use-package

#+begin_src emacs-lisp
(straight-use-package 'use-package)
#+end_src


* emacs variables

For some reason, setting the variable =termux-p= in =:custom= did not work.

#+begin_src emacs-lisp
(use-package emacs
  :custom
  (confirm-nonexistent-file-or-buffer nil)
  (custom-file (concat user-emacs-directory "custom.el"))
  (frame-title-format "%b: %+%+ %f")
  (mouse-drag-copy-region t)
  :config
  (setq termux-p
   (or (string-suffix-p "linux-android" system-configuration)
       (string-prefix-p "arm-unknown-linux" system-configuration)))
  (setq windows-p
   (string-suffix-p "mingw32" system-configuration))
  (load custom-file 'noerror)
  (global-set-key [(f2) (f2)] 'indent-according-to-mode)
  (global-set-key [(f2) (f3)] 'copy-region-as-kill)
  (global-set-key [(f2) (f4)] 'auto-revert-mode)
  :init
  (global-visual-line-mode +1)
  (recentf-mode +1)
  (show-paren-mode +1))
#+end_src


* personal settings

#+begin_src emacs-lisp
(setq my-notes-directory "~/Dropbox/org/reading-notes"
      my-bibliography "~/Dropbox/texmf/bibtex/bib/misc/rvf.bib"
      my-library-path "~/Documents/References/")
#+end_src

* abbrev

https://www.gnu.org/software/emacs/manual/html_node/emacs/Abbrevs.html

#+begin_src emacs-lisp
(use-package abbrev
  :config
  (abbrev-mode 1)
  :hook
  (text-mode . abbrev-mode))
#+end_src

* all-the-icons

#+begin_src emacs-lisp
(use-package all-the-icons
  :straight t
  :if (display-graphic-p))
#+end_src

* auctex                                                               :math:

https://www.gnu.org/software/auctex/

#+BEGIN_QUOTE
AUCTeX is an extensible package for writing and formatting TeX files in GNU Emacs and XEmacs. It supports many different TeX macro packages, including AMS-TeX, LaTeX, Texinfo, ConTeXt, and docTeX (dtx files).
#+END_QUOTE

#+begin_src emacs-lisp
(use-package tex
  :straight auctex
  :mode ("\\.tikz\\'" . latex-mode)
  :init
  (defun my-latex-config ()
    (LaTeX-math-mode)
    (TeX-add-symbols '("emph" 1))
    (LaTeX-add-environments '("definition")
			    '("theorem")
			    '("lemma")
			    '("corollary")
			    '("definicion")
			    '("teorema")
			    '("lema")
			    '("corolario"))
    (TeX-run-style-hooks "tikz")
    (TeX-run-style-hooks "tkz-graph")
    (TeX-run-style-hooks "tkz-berge"))
  :custom
  (TeX-auto-save t)
  (TeX-electric-escape t)
  (TeX-insert-braces nil)
  (TeX-parse-self t)
  (TeX-save-query nil)
  (reftex-plug-into-AUCTeX t)
  (reftex-use-external-file-finders t)
  :hook
  (LaTeX-mode . my-latex-config)
  (LaTeX-mode . turn-on-reftex))
#+end_src

* bibretrieve

https://github.com/pzorin/bibretrieve

#+begin_quote
An Emacs library for searching and downloading BibTeX entries from the web.
#+end_quote

#+begin_src emacs-lisp
(use-package bibretrieve
  :straight t)
#+end_src

* cdlatex                                                              :math:

https://staff.fnwi.uva.nl/c.dominik/Tools/cdlatex/

#+BEGIN_QUOTE
CDLaTeX is a minor mode for Emacs supporting fast insertion of environment templates and math stuff in LaTeX. Similar commands are also offered as part of the AUCTeX package, but it is not the same - CDLaTeX focuses on speediness for inserting LaTeX constructs. I myself am using CDLaTeX on top of AUCTeX.
#+END_QUOTE

The settings in =cdlatex-math-symbol-alist= are useful also when writing math in org-mode.

#+begin_src emacs-lisp
(use-package cdlatex
  :straight t
  :custom
  (cdlatex-math-symbol-alist
   '(( ?c   ("\\colon"))
     ( ?m   ("\\mu" "\\mapsto"))
     ( ?p   ("\\pi" "\\varpi" "\\perp"))
     ( ?o   ("\\omega" "\\oplus"))
     ( ?O   ("\\Omega" "\\mathrm{Orb}"))
     ( ?S   ("\\Sigma" "\\mathrm{Stab}"))
     ( ?T   ("\\bigtriangleup"))
     ( ?-   ("\\cap" "\\leftrightarrow" "\\longleftrightarrow"))
     ( ?.   ("\\ldots" "\\cdots" "\\cdot"))
     ( ?*   ("\\times" "\\otimes"))
     ( ?<   ("\\leq" "\\langle" "\\trianglelefteq"))
     ( ?>   ("\\geq" "\\rangle" "\\trianglerighteq"))
     ( ?\[  ("\\subseteq"))))
  (cdlatex-math-modify-alist
   '(( ?a "\\overrightarrow" nil t nil nil)
     ( ?k "\\mathfrak" nil t nil nil)
     ( ?B "\\mathbb"         nil t nil nil)))
  (cdlatex-command-alist
   '(("bin"  "Insert \\binom{}{}"
      "\\binom{?}{}"       cdlatex-position-cursor nil nil t)
     ("norm" "Insert \\Vert \\Vert"
      "\\Vert ?\\Vert"     cdlatex-position-cursor nil nil t)
     ("gen"  "Insert \\langle \\rangle"
      "\\langle ?\\rangle" cdlatex-position-cursor nil nil t)
     ("set"  "Insert a set"
      "\\{?\\mid \\}"      cdlatex-position-cursor nil nil t)))
  (cdlatex-simplify-sub-super-scripts nil))
#+end_src

* dashboard

https://github.com/emacs-dashboard/emacs-dashboard

#+begin_src emacs-lisp
(use-package dashboard
  :straight t
  :after (all-the-icons projectile)
  :init
  (add-hook 'after-init-hook 'dashboard-refresh-buffer)
  :config
  (dashboard-setup-startup-hook)
  (add-to-list 'dashboard-items '(projects . 5))
  :custom
  (dashboard-projects-backend 'projectile)
  (dashboard-set-heading-icons t)
  (dashboard-set-file-icons t)
  (dashboard-set-footer nil))
#+end_src

* flyspell

Flyspell comes with Emacs.

#+begin_quote
Flyspell enables on-the-fly spell checking in Emacs by the means of a minor mode.
#+end_quote

#+begin_src emacs-lisp
(use-package flyspell
  :straight (:type built-in)
  :hook
  (prog-mode . flyspell-prog-mode)
  (text-mode . flyspell-mode))
#+end_src

* helm-bibtex

https://github.com/tmalsburg/helm-bibtex

#+begin_quote
Search and manage bibliographies in Emacs
#+end_quote

#+begin_src emacs-lisp
(use-package helm-bibtex
  :straight t
  :after helm
  :config
  (defun bibtex-completion-open-pdf-external (keys &optional fallback-action)
    (let ((bibtex-completion-pdf-open-function
	   (lambda (fpath)
	     (call-process "evince" nil 0 nil fpath))))
      (bibtex-completion-open-pdf (list keys) fallback-action)))
  (helm-add-action-to-source
   "Evince" 'bibtex-completion-open-pdf-external
   helm-source-bibtex 1)
  :custom
  (bibtex-completion-bibliography my-bibliography)
  (bibtex-completion-library-path my-library-path)
  (bibtex-completion-notes-path my-notes-directory)
  (bibtex-completion-pdf-extension '(".pdf" ".djvu"))
  (bibtex-completion-pdf-symbol "☺"))
#+end_src

* ido

Ido comes with Emacs.

#+begin_quote
The Ido package lets you switch between buffers and visit files and directories with a minimum of keystrokes. It is a superset of Iswitchb, the interactive buffer switching package by Stephen Eglen.
#+end_quote

#+begin_src emacs-lisp
(use-package ido
  :config
  (ido-mode 1))
#+end_src

* magit

https://magit.vc

#+begin_quote
Magit is a complete text-based user interface to Git.
#+end_quote

#+begin_src emacs-lisp
(use-package magit
  :straight t
  :bind ("C-c m" . magit-status))
#+end_src

* mixed pitch

https://gitlab.com/jabranham/mixed-pitch

#+begin_src emacs-lisp
(use-package mixed-pitch
  :straight t
  :hook
  (text-mode . mixed-pitch-mode))
#+end_src

* modus themes

https://gitlab.com/protesilaos/modus-themes

#+begin_src emacs-lisp
(use-package modus-themes
  :straight t
  :if (display-graphic-p)
  :init
  ;; Add all your customizations prior to loading the themes
  (setq modus-themes-italic-constructs t
        modus-themes-bold-constructs nil
        modus-themes-region '(bg-only no-extend))

  ;; Load the theme files before enabling a theme
  (modus-themes-load-themes)
  :config
  ;; Load the theme of your choice:
  (modus-themes-load-operandi) ;; OR (modus-themes-load-vivendi)
  :bind ("<f6> m" . modus-themes-toggle))
#+end_src

* orderless

#+begin_src emacs-lisp
(use-package orderless
  :straight t
  :init
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
  ;;       orderless-component-separator #'orderless-escapable-split-on-space)
  (setq completion-styles '(orderless)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))

#+end_src

* org mode

Org mode comes with Emacs.

https://orgmode.org/

#+begin_quote
A GNU Emacs major mode for convenient plain text markup — and much more.

Org mode is for keeping notes, maintaining to-do lists, planning projects, authoring documents, computational notebooks, literate programming and more — in a fast and effective plain text system.
#+end_quote

#+begin_src emacs-lisp
(use-package org
  :bind (("C-c a" . org-agenda)
	 ("C-c c" . org-capture)
	 ("C-c l" . org-store-link)
	 :map org-mode-map
	 ;; these two next functions are defined in the :init section
	 ("$" . yf/org-electric-dollar)
	 ("|" . org-absolute-value)
	 ([?\s-j] . org-babel-next-src-block)
	 ([?\s-k] . org-babel-previous-src-block)
	 ([?\s-l] . org-edit-src-code)
	 :map org-src-mode-map
	 ([?\s-l] . org-edit-src-exit))
  :init
  ;; from Nicolas Richard <theonewiththeevillook@yahoo.fr>
  ;; Date: Fri, 8 Mar 2013 16:23:02 +0100
  ;; Message-ID: <87vc913oh5.fsf@yahoo.fr>
  (defun yf/org-electric-dollar nil
    "When called once, insert \\(\\) and leave point in between.
When called twice, replace the previously inserted \\(\\) by one $."
    (interactive)
    (if (and (looking-at "\\\\)") (looking-back "\\\\("))
	(progn (delete-char 2)
	       (delete-char -2)
	       (insert "$"))
      (insert "\\(\\)")
      (backward-char 2)))
  ;; see https://lists.gnu.org/archive/html/emacs-orgmode/2015-09/msg00118.html
  (defmacro by-backend (&rest body)
    `(case org-export-current-backend ,@body))
  ;; see http://endlessparentheses.com/ispell-and-org-mode.html
  (defun endless/org-ispell ()
    "Configure `ispell-skip-region-alist' for `org-mode'."
    (make-local-variable 'ispell-skip-region-alist)
    (add-to-list 'ispell-skip-region-alist '(org-property-drawer-re))
    (add-to-list 'ispell-skip-region-alist '("~" "~"))
    (add-to-list 'ispell-skip-region-alist '("=" "="))
    (add-to-list 'ispell-skip-region-alist '("^#\\+begin_src" . "^#\\+end_src")))
  (defun org-absolute-value ()
    "Insert || and leave point inside when pressing |"
    (interactive)
    (if (org-inside-LaTeX-fragment-p)
	(progn
	  (insert "||")
	  (backward-char 1))
      (insert "|")))
  (defun my-org-mode-hook ()
    ;; https://emacs.stackexchange.com/a/63581/29
    ;; do not expand abbrevs in org-mode block sources
    (setq abbrev-expand-function (lambda ()
				   (unless (org-in-src-block-p)
				     (abbrev--default-expand))))
    (turn-on-auto-revert-mode)
    (turn-on-org-cdlatex))
  :custom
  (org-beamer-environments-extra
	'(("conjecture"   "j" "\\begin{conjecture}%a%U"   "\\end{conjecture}")
	  ("corollary"   "r" "\\begin{corollary}%a%U"   "\\end{corollary}")
	  ("lemma"       "l" "\\begin{lemma}%a%U"       "\\end{lemma}")
	  ("proposition" "P" "\\begin{proposition}%a%U" "\\end{proposition}")))
  (org-export-with-tags nil)
  (org-file-apps
   '((auto-mode . emacs)
     ("pdf" . "evince %s")))
  (org-format-latex-header (concat org-format-latex-header "\n\\usepackage{lxfonts}"))
  (org-format-latex-options (plist-put org-format-latex-options :scale 2.1))
  (org-hide-emphasis-markers t)
  (org-highlight-latex-and-related '(native))
  (org-latex-listings t)
  (org-log-done 'note)
  (org-return-follows-link t)
  (org-src-preserve-indentation t)
  (org-support-shift-select 'always)
  ;; filter
  (defun replace-math-md (contents backend info)
    (when (eq backend 'md)
      (s-with contents
	(replace-regexp-in-string "\\\\(" "\\\\\\\\(")
	(replace-regexp-in-string "\\\\)" "\\\\\\\\)"))))
  (add-to-list 'org-export-filter-final-output-functions
	       'replace-math-md)
  :config
  (require 'ox-beamer)
  (font-lock-add-keywords
   'org-mode
   '(("^ *\\([-]\\) "
      (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
  (if (display-graphic-p)
      (let* ((variable-tuple
              (cond ((x-list-fonts "Fira Sans") '(:font "Fira Sans"))
                    ((x-family-fonts "Sans Serif") '(:family "Sans Serif"))
                    (nil (warn "Cannot find a Sans Serif Font."))))
             (base-font-color (face-foreground 'default nil 'default))
             (headline `(:inherit default :weight bold :foreground ,base-font-color)))

	(custom-theme-set-faces
	 'user
	 `(org-level-8 ((t (,@headline ,@variable-tuple))))
	 `(org-level-7 ((t (,@headline ,@variable-tuple))))
	 `(org-level-6 ((t (,@headline ,@variable-tuple))))
	 `(org-level-5 ((t (,@headline ,@variable-tuple))))
	 `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.1))))
	 `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.2))))
	 `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.3))))
	 `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.5))))
	 `(org-document-title ((t (,@headline ,@variable-tuple
					      :height 1.75 :underline nil)))))))
  :hook
  (org-mode . my-org-mode-hook)
  (org-mode . endless/org-ispell)
  (org-babel-after-execute . org-redisplay-inline-images))
#+end_src

** org-fragtog

#+begin_src emacs-lisp
(use-package org-fragtog
  :straight t
  :init
  (add-hook 'org-mode-hook 'org-fragtog-mode))
#+end_src

** org-ref

#+begin_src emacs-lisp
(use-package org-ref
  :straight t)
#+end_src

** org-roam

https://www.orgroam.com/

#+begin_src emacs-lisp
(use-package org-roam
  :straight t
  :init
  (setq org-roam-v2-ack t)
  :custom
  (org-roam-completion-everywhere t)
  (org-roam-directory my-notes-directory)
  :config
  (use-package org-roam-protocol)
  (org-roam-db-autosync-mode)
  (org-roam-setup))
#+end_src

*** org-roam-bibtex

#+begin_src emacs-lisp
(use-package org-roam-bibtex
  :straight t
  :bind (:map org-mode-map
	      (("C-c n a" . orb-note-actions)))
  :init
  (org-roam-bibtex-mode)
  :custom
  (orb-insert-interface 'helm-bibtex)
  (orb-preformat-keywords
   '("citekey" "title" "url" "author-or-editor" "keywords" "file"))
  (orb-process-file-keyword t)
  (orb-file-field-extensions '("pdf"))
  :config
  (add-to-list 'org-roam-capture-templates
      `("r" "bibliography reference" plain
	 (file ,(concat user-emacs-directory "orb-template.org"))
         :if-new
         (file+head "references/${citekey}.org" "#+title: ${title} by ${author-or-editor}\n"))))
#+end_src

*** org-roam-ui

#+begin_src emacs-lisp
(use-package org-roam-ui
  :straight
    (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
    :after org-roam
;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
;;         a hookable mode anymore, you're advised to pick something yourself
;;         if you don't care about startup time, use
;;  :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+end_src

* pdf-tools

https://github.com/politza/pdf-tools

#+begin_quote
PDF Tools is, among other things, a replacement of DocView for PDF files. The key difference is that pages are not pre-rendered by e.g. ghostscript and stored in the file-system, but rather created on-demand and stored in memory.
#+end_quote

#+begin_src emacs-lisp
(use-package pdf-tools
  :if window-system
  :straight t
  :config
  (pdf-tools-install))
#+end_src

* projectile

https://github.com/bbatsov/projectile

#+begin_src emacs-lisp
(use-package projectile
  :straight t
  :init
  (projectile-mode +1)
  :bind (:map projectile-mode-map
              ("C-c p" . projectile-command-map)))
#+end_src

* smartparens

https://github.com/Fuco1/smartparens

#+begin_quote
Smartparens is a minor mode for dealing with pairs in Emacs.
#+end_quote

#+begin_src emacs-lisp
(use-package smartparens
  :straight t
  :config
  (require 'smartparens-config)
  (smartparens-global-mode 1)
  (show-smartparens-global-mode 1)
  (sp-local-pair 'org-mode "=" "="
		 :unless '(sp-point-after-word-p sp-in-math-p)
		 :post-handlers '(("[d1]" "SPC")))
  (sp-local-pair 'python-mode "``" "``"))
#+end_src

* vertico

#+begin_src emacs-lisp
(use-package vertico
  :straight t
  :init
  (vertico-mode)
  ;; Different scroll margin
  ;; (setq vertico-scroll-margin 0)
  ;; Show more candidates
  ;; (setq vertico-count 20)
  ;; Grow and shrink the Vertico minibuffer
  ;; (setq vertico-resize t)
  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  ;; (setq vertico-cycle t)
  )
#+end_src
* yasnippet

https://github.com/joaotavora/yasnippet

#+begin_quote
YASnippet is a template system for Emacs. It allows you to type an abbreviation and automatically expand it into function templates. Bundled language templates include: C, C++, C#, Perl, Python, Ruby, SQL, LaTeX, HTML, CSS and more. The snippet syntax is inspired from TextMate's syntax, you can even import most TextMate templates to YASnippet.
#+end_quote

Setting =yas-indent-line= to fixed has the effect that the text expanded by a snipped is indented as much as where the snipped is invoked.

#+begin_src emacs-lisp
(use-package yasnippet
  :straight t
  :config
  (yas-global-mode)
  :custom
  (yas-indent-line 'fixed))
#+end_src

Snippets defined here:

| key  | binding | Meaning    |
|------+---------+------------|
| coro | F6 c    | Corollary  |
| defi | F6 d    | Definition |
| lemm | F6 l    | Lemma      |
| proo | F6 p    | Proof      |
| theo | F6 t    | Theorem    |

* warnings

This was needed for the snippets for theorems, (since insertion for labels modifies the buffer). See https://emacs.stackexchange.com/a/24471/29.

#+begin_src emacs-lisp
(use-package warnings
  :straight (:type built-in)
  :after (yasnippet)
  :config
  (add-to-list 'warning-suppress-types '(yasnippet backquote-change)))
#+end_src

* which-key

#+begin_src emacs-lisp
(use-package which-key
  :straight t
  :defer 0.2
  :diminish
  :config
  (which-key-mode))
#+end_src

