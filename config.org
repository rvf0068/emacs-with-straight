#+title: Emacs configuration using straight.el
#+options: toc:nil date:nil author:nil

#+latex_header: \usepackage{listings}
#+latex_header: \lstdefinestyle{source}{basicstyle=\footnotesize\ttfamily,frame=tb}
#+latex_header: \lstset{style=source}
#+latex_header: \usepackage[margin=2.5cm]{geometry}

#+startup: overview

* personal settings

#+begin_src emacs-lisp
;; -*- lexical-binding: t; -*-

(setq my-notes-directory "~/Dropbox/org/reading-notes"
      my-bibliography "~/Dropbox/texmf/bibtex/bib/misc/rvf.bib"
      my-library-path "~/Documents/References/")
#+end_src

* use-package

#+begin_src emacs-lisp
(straight-use-package 'use-package)
#+end_src


* emacs variables and functions

From https://www.gnu.org/software/emacs/manual/html_node/elisp/Key-Binding-Conventions.html

#+begin_quote
Sequences consisting of C-c and a letter (either upper or lower case) are reserved for users. Function keys F5 through F9 without modifier keys are also reserved for users to define.
#+end_quote

For some reason, setting the variable =termux-p= in =:custom= did not work.

#+begin_src emacs-lisp
(use-package emacs
  :bind
  ("C-x k" . kill-this-buffer)
  ([(menu)] . dabbrev-expand)
  ([(super down)] . duplicate-line-forward)
  ([(super up)] . duplicate-line-backward)
  ([(f2) (f2)] . indent-according-to-mode)
  ([(f2) (f4)] . auto-revert-mode)
  ([(f7)] . helm-bibtex)
  ("<f8> b" . open-my-bibliography)
  ("<f8> c" . org-ref-cite-insert-helm)
  ("<f8> d" . org-ref-insert-cite-link)
  ("<f8> f" . org-roam-node-find)
  ("<f8> i" . org-roam-node-insert)
  ("<f8> l" . org-ref-insert-label-link)
  ("<f8> r" . org-ref-insert-ref-link)
  :custom
  (confirm-nonexistent-file-or-buffer nil)
  (custom-file (concat user-emacs-directory "custom.el"))
  (frame-title-format "%b: %+%+ %f")
  (mouse-drag-copy-region t)
  :config
  (setq termux-p
   (or (string-suffix-p "linux-android" system-configuration)
       (string-prefix-p "arm-unknown-linux" system-configuration)))
  (setq windows-p
   (string-suffix-p "mingw32" system-configuration))
  (load custom-file 'noerror)
  :init
  (column-number-mode +1)
  (global-visual-line-mode +1)
  (recentf-mode +1)
  (show-paren-mode +1)
  (defun open-my-bibliography ()
      (interactive)
    (find-file my-bibliography))
  ;; From: sandipchitale@yahoo.com (Sandip Chitale)
  ;; Newsgroups: gnu.emacs.sources
  ;; Subject: CODE: Duplicate line or region backward or forward
  ;; Date: 7 Feb 2004 12:15:35 -0800
  (defun duplicate-line-backward ()
    "Duplicate the current line backward."
    (interactive "*")
    (save-excursion
      (let ((contents (buffer-substring
                       (line-beginning-position)
                       (line-end-position))))
	(beginning-of-line)
	(insert contents ?\n)))
    (previous-line 1))
  (defun duplicate-line-forward ()
    "Duplicate the current line forward."
    (interactive "*")
    (save-excursion
      (let ((contents (buffer-substring
                       (line-beginning-position)
                       (line-end-position))))
	(end-of-line)
	(insert ?\n contents)))
    (next-line 1)))
#+end_src


* abbrev

https://www.gnu.org/software/emacs/manual/html_node/emacs/Abbrevs.html

#+begin_src emacs-lisp
(use-package abbrev
  :config
  (abbrev-mode 1)
  :hook
  (text-mode . abbrev-mode))
#+end_src

* all-the-icons

#+begin_src emacs-lisp
(use-package all-the-icons
  :straight t
  :if (display-graphic-p))
#+end_src

* auctex                                                               :math:

https://www.gnu.org/software/auctex/

#+BEGIN_QUOTE
AUCTeX is an extensible package for writing and formatting TeX files in GNU Emacs and XEmacs. It supports many different TeX macro packages, including AMS-TeX, LaTeX, Texinfo, ConTeXt, and docTeX (dtx files).
#+END_QUOTE

#+begin_src emacs-lisp
(use-package tex
  :straight auctex
  :mode ("\\.tikz\\'" . latex-mode)
  :init
  (defun my-latex-config ()
    (LaTeX-math-mode)
    (TeX-add-symbols '("emph" 1))
    (TeX-add-symbols '("to"))
    (LaTeX-add-environments '("definition" LaTeX-env-label)
			    '("theorem" LaTeX-env-label)
			    '("lemma" LaTeX-env-label)
			    '("corollary" LaTeX-env-label)
			    '("proposition" LaTeX-env-label)
			    '("problem" LaTeX-env-label)
			    '("remark" LaTeX-env-label)
			    '("example" LaTeX-env-label))
    (add-to-list 'LaTeX-label-alist '("definition" . "def:"))
    (add-to-list 'LaTeX-label-alist '("theorem" . "thm:"))
    (add-to-list 'LaTeX-label-alist '("lemma" . "lem:"))
    (add-to-list 'LaTeX-label-alist '("corollary" . "cor:"))
    (add-to-list 'LaTeX-label-alist '("proposition" . "prop:"))
    (add-to-list 'LaTeX-label-alist '("problem" . "prob:"))
    (add-to-list 'LaTeX-label-alist '("remark" . "rem:"))
    (add-to-list 'LaTeX-label-alist '("example" . "exa:"))
    (add-to-list 'reftex-label-alist '("definition" ?d "def:" "~\\ref{%s}" nil ("Definition" "definition")))
    (add-to-list 'reftex-label-alist '("theorem" ?h "thm:" "~\\ref{%s}" nil ("Theorem" "theorem")))
    (add-to-list 'reftex-label-alist '("lemma" ?l "lem:" "~\\ref{%s}" nil ("Lemma" "lemma")))
    (add-to-list 'reftex-label-alist '("corollary" ?c "cor:" "~\\ref{%s}" nil ("Corollary" "corollary")))
    (add-to-list 'reftex-label-alist '("proposition" ?p "prop:" "~\\ref{%s}" nil ("Proposition" "proposition")))
    (add-to-list 'reftex-label-alist '("problem" ?b "prob:" "~\\ref{%s}" nil ("Problem" "problem")))
    (add-to-list 'reftex-label-alist '("remark" ?r "rem:" "~\\ref{%s}" nil ("Remark" "remark")))
    (add-to-list 'reftex-label-alist '("example" ?e "rem:" "~\\ref{%s}" nil ("Example" "example")))
    (TeX-run-style-hooks "tikz")
    (TeX-run-style-hooks "tkz-graph")
    (TeX-run-style-hooks "tkz-berge"))
  :custom
  (TeX-auto-save t)
  (TeX-electric-escape t)
  (TeX-insert-braces nil)
  (TeX-parse-self t)
  (TeX-save-query nil)
  (reftex-plug-into-AUCTeX t)
  (reftex-use-external-file-finders t)
  :hook
  (LaTeX-mode . cdlatex-mode)
  (LaTeX-mode . my-latex-config)
  (LaTeX-mode . turn-on-reftex))
#+end_src

* bibretrieve

https://github.com/pzorin/bibretrieve

#+begin_quote
An Emacs library for searching and downloading BibTeX entries from the web.
#+end_quote

#+begin_src emacs-lisp
(use-package bibretrieve
  :straight t)
#+end_src

* bibtex

#+begin_src emacs-lisp
(use-package bibtex
  :straight (:type built-in)
  :bind (:map bibtex-mode-map
	      ("<f5> b" . bibretrieve)
	      ("<f5> m" . mark-sexp))
  :custom
  (bibtex-autokey-year-title-separator "-")
  (bibtex-autokey-year-length 4)
  (bibtex-autokey-names nil)
  (bibtex-autokey-name-separator "-")
  (bibtex-autokey-name-year-separator "-")
  (bibtex-autokey-titleword-separator "-")
  (bibtex-autokey-titleword-length "All")
  (bibtex-autokey-titlewords "All")
  (bibtex-autokey-titleword-ignore "")
  :init
  (defun bibtex-generate-autokey ()
    (let* ((names (bibtex-autokey-get-names))
           (year (bibtex-autokey-get-year))
           (title (bibtex-autokey-get-title))
           (autokey (concat year
                            (unless (or (equal names "")
					(equal year ""))
                              bibtex-autokey-name-year-separator)
                            names
                            (unless (or (and (equal names "")
                                             (equal year ""))
					(equal title ""))
                              bibtex-autokey-year-title-separator)
                            title)))
      (if bibtex-autokey-before-presentation-function
          (funcall bibtex-autokey-before-presentation-function autokey)
	autokey))))
#+end_src

* cdlatex                                                              :math:

https://staff.fnwi.uva.nl/c.dominik/Tools/cdlatex/

#+BEGIN_QUOTE
CDLaTeX is a minor mode for Emacs supporting fast insertion of environment templates and math stuff in LaTeX. Similar commands are also offered as part of the AUCTeX package, but it is not the same - CDLaTeX focuses on speediness for inserting LaTeX constructs. I myself am using CDLaTeX on top of AUCTeX.
#+END_QUOTE

The settings in =cdlatex-math-symbol-alist= are useful also when writing math in org-mode.

#+begin_src emacs-lisp
(use-package cdlatex
  :straight t
  :custom
  (cdlatex-math-symbol-alist
   '(( ?c   ("\\colon"))
     ( ?m   ("\\mu" "\\mapsto"))
     ( ?p   ("\\pi" "\\varpi" "\\perp"))
     ( ?o   ("\\omega" "\\oplus"))
     ( ?O   ("\\Omega" "\\mathrm{Orb}"))
     ( ?S   ("\\Sigma" "\\mathrm{Stab}"))
     ( ?T   ("\\bigtriangleup"))
     ( ?-   ("\\cap" "\\leftrightarrow" "\\longleftrightarrow"))
     ( ?.   ("\\ldots" "\\cdots" "\\cdot"))
     ( ?*   ("\\times" "\\otimes"))
     ( ?<   ("\\leq" "\\langle" "\\trianglelefteq"))
     ( ?>   ("\\geq" "\\rangle" "\\trianglerighteq"))
     ( ?\[  ("\\subseteq"))))
  (cdlatex-math-modify-alist
   '(( ?a "\\overrightarrow" nil t nil nil)
     ( ?k "\\mathfrak" nil t nil nil)
     ( ?B "\\mathbb"         nil t nil nil)))
  (cdlatex-command-alist
   '(("bin"  "Insert \\binom{}{}"
      "\\binom{?}{}"       cdlatex-position-cursor nil nil t)
     ("norm" "Insert \\Vert \\Vert"
      "\\Vert ?\\Vert"     cdlatex-position-cursor nil nil t)
     ("gen"  "Insert \\langle \\rangle"
      "\\langle ?\\rangle" cdlatex-position-cursor nil nil t)
     ("set"  "Insert a set"
      "\\{?\\mid \\}"      cdlatex-position-cursor nil nil t)))
  (cdlatex-simplify-sub-super-scripts nil))
#+end_src

* company-mode

http://company-mode.github.io/

#+begin_src emacs-lisp
(use-package company
  :straight t
  :init
  (add-hook 'after-init-hook 'global-company-mode))
#+end_src

* consult

=consult-imenu= and =consult-line= are interesting to navigate files, especially org-mode files.

#+begin_src emacs-lisp
(use-package consult
  :straight t)
#+end_src

** consult-bibtex

https://github.com/mohkale/consult-bibtex

#+begin_src emacs-lisp
(use-package consult-bibtex
  :straight (:host github :repo "mohkale/consult-bibtex")
  :after consult)
#+end_src

** consult-dir

https://github.com/karthink/consult-dir

#+begin_src emacs-lisp
(use-package consult-dir
  :straight t
  :after (consult vertico)
  :bind (("C-x C-d" . consult-dir)
         :map vertico-map
         ("C-x C-d" . consult-dir)
         ("C-x C-j" . consult-dir-jump-file)))
#+end_src

* dashboard

https://github.com/emacs-dashboard/emacs-dashboard

#+begin_src emacs-lisp
(use-package dashboard
  :straight t
  :after (all-the-icons projectile)
  :init
  (add-hook 'after-init-hook 'dashboard-refresh-buffer)
  :config
  (dashboard-setup-startup-hook)
  (add-to-list 'dashboard-items '(projects . 5))
  :custom
  (dashboard-projects-backend 'projectile)
  (dashboard-set-heading-icons t)
  (dashboard-set-file-icons t)
  (dashboard-set-footer nil))
#+end_src

* deft

https://jblevins.org/projects/deft/

#+begin_quote
Deft is an Emacs mode for quickly browsing, filtering, and editing directories of plain text notes, inspired by Notational Velocity. It was designed for increased productivity when writing and taking notes by making it fast and simple to find the right file at the right time and by automating many of the usual tasks such as creating new files and saving files.
#+end_quote

#+begin_src emacs-lisp
(use-package deft
  :straight t
  :after org
  :bind
  ("C-c n d" . deft)
  :custom
  (deft-auto-save-interval 0)
  (deft-default-extension "org")
  (deft-directory my-notes-directory)
  (deft-extensions '("org" "tex"))
  (deft-file-naming-rules '((noslash . "-")
			    (nospace . "-")
			    (case-fn . downcase)))
  (deft-ignore-file-regexp "options\\.org\\|readme\\.org")
  (deft-recursive t)
  (deft-strip-summary-regexp ":PROPERTIES:\n\\(.+\n\\)+:END:\n")
  (deft-use-filename-as-title 't)
  (deft-use-filter-string-for-filename t))
#+end_src

* dictionary

#+begin_src emacs-lisp
(use-package dictionary
  :straight t)
#+end_src

* dired

https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html

#+begin_quote
Dired makes an Emacs buffer containing a listing of a directory, and optionally some of its subdirectories as well. You can use the normal Emacs commands to move around in this buffer, and special Dired commands to operate on the listed files.
#+end_quote

#+begin_src emacs-lisp
(use-package dired
  :straight (:type built-in)
  :init
  (add-hook 'dired-mode-hook
	    (lambda ()
              (dired-hide-details-mode)))
  :custom
  (dired-dwim-target t)
  (use-package dired-x))
#+end_src

** all-the-icons-dired

#+begin_src emacs-lisp
(use-package all-the-icons-dired
  :straight t
  :after (all-the-icons)
  :hook (dired-mode . all-the-icons-dired-mode))
#+end_src

** dired-aux

#+begin_src emacs-lisp
(use-package dired-aux
  :straight (:type built-in))
#+end_src

** dired-open

When pressing =RET=, in dired, files will be opened with =setsid xdg-open=. If one wants to open in Emacs, use =C-u RET=. The setting for =setsid= was needed for me, see https://askubuntu.com/a/824123/8975.

#+begin_src emacs-lisp
(use-package dired-open
  :straight t
  :custom
  (dired-guess-shell-alist-user
   '(("\\.mp3\\'" "setsid xdg-open")
     ("\\.mp4\\'" "setsid xdg-open")
     ("\\.pdf\\'" "setsid xdg-open")
     ("\\.ps\\'" "setsid xdg-open")))
  (dired-open-functions '(dired-open-guess-shell-alist)))
#+end_src

** dired-sidebar

https://github.com/jojojames/dired-sidebar

#+begin_src emacs-lisp
(use-package dired-sidebar
  :straight t
  :commands (dired-sidebar-toggle-sidebar))
#+end_src

** dired-x

#+begin_src emacs-lisp
(use-package dired-x
  :straight (:type built-in))
#+end_src

* elfeed

#+begin_src emacs-lisp
(use-package elfeed
  :straight t
  :custom
  (browse-url-browser-function 'eww-browse-url)
  (elfeed-sort-order 'ascending))
#+end_src

** elfeed-org

https://github.com/remyhonig/elfeed-org

#+begin_src emacs-lisp
(use-package elfeed-org
  :straight t
  :init
  (elfeed-org))
#+end_src
* elpy

https://github.com/jorgenschaefer/elpy

#+begin_src emacs-lisp
(use-package elpy
  :straight t
  :init
  (elpy-enable))
#+end_src

* embark

#+begin_src emacs-lisp
(use-package embark
  :straight t
  :bind
  (("C-=" . embark-act)))
#+end_src

* flyspell

Flyspell comes with Emacs.

#+begin_quote
Flyspell enables on-the-fly spell checking in Emacs by the means of a minor mode.
#+end_quote

#+begin_src emacs-lisp
(use-package flyspell
  :straight (:type built-in)
  :hook
  (prog-mode . flyspell-prog-mode)
  (text-mode . flyspell-mode))
#+end_src

* gap-mode

https://www.gap-system.org/Packages/Contrib/emacs.html

#+begin_quote
An Emacs major-mode for editing GAP files.
#+end_quote

#+begin_src emacs-lisp
(use-package gap-mode
  :straight t
  :custom
  (gap-executable "gap")
  (gap-start-options  '("-E" "-f" "-b" "-m" "1024m")))
#+end_src

* helm-bibtex

https://github.com/tmalsburg/helm-bibtex

#+begin_quote
Search and manage bibliographies in Emacs
#+end_quote

#+begin_src emacs-lisp
(use-package helm-bibtex
  :straight t
  :after helm
  :config
  (defun bibtex-completion-open-pdf-external (keys &optional fallback-action)
    (let ((bibtex-completion-pdf-open-function
	   (lambda (fpath)
	     (call-process "evince" nil 0 nil fpath))))
      (bibtex-completion-open-pdf (list keys) fallback-action)))
  (helm-add-action-to-source
   "Evince" 'bibtex-completion-open-pdf-external
   helm-source-bibtex 1)
  :custom
  (bibtex-completion-bibliography my-bibliography)
  (bibtex-completion-library-path my-library-path)
  (bibtex-completion-notes-path my-notes-directory)
  (bibtex-completion-pdf-extension '(".pdf" ".djvu"))
  (bibtex-completion-pdf-symbol "☺"))
#+end_src

* ido

Ido comes with Emacs.

#+begin_quote
The Ido package lets you switch between buffers and visit files and directories with a minimum of keystrokes. It is a superset of Iswitchb, the interactive buffer switching package by Stephen Eglen.
#+end_quote

#+begin_src emacs-lisp
(use-package ido
  :config
  (ido-mode 1))
#+end_src

* jupyter

https://github.com/nnicandro/emacs-jupyter

#+begin_src emacs-lisp
(use-package jupyter
  :if (executable-find "jupyter")
  :straight t
  :config
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((latex . t)
     (python . t)
     (jupyter . t))))
#+end_src

* magit

https://magit.vc

#+begin_quote
Magit is a complete text-based user interface to Git.
#+end_quote

#+begin_src emacs-lisp
(use-package magit
  :straight t
  :bind ("C-c m" . magit-status))
#+end_src

* marginalia

#+begin_src emacs-lisp
(use-package marginalia
  :straight t
  :init
  (marginalia-mode))
#+end_src

* mastodon

https://codeberg.org/martianh/mastodon.el

#+begin_src emacs-lisp
(use-package mastodon
  :straight t
  :after discover
  :config
  (mastodon-discover))
#+end_src

* math-delimiters

https://github.com/oantolin/math-delimiters

#+begin_quote
This package provides the command math-delimiters-insert to insert TeX/LaTeX math delimiters.
#+end_quote

#+begin_src emacs-lisp
(use-package math-delimiters
  :straight (:host github :repo "oantolin/math-delimiters")
  :after (org tex-mode cdlatex)
  :bind (:map org-mode-map
	 ("$" . math-delimiters-insert)
	 :map tex-mode-map
	 ("$" . math-delimiters-insert)
	 :map cdlatex-mode-map
	 ("$" . nil)))
#+end_src

* mixed pitch

https://gitlab.com/jabranham/mixed-pitch

#+begin_src emacs-lisp
(use-package mixed-pitch
  :straight t
  :hook
  (text-mode . mixed-pitch-mode))
#+end_src

* modus themes

https://gitlab.com/protesilaos/modus-themes

#+begin_src emacs-lisp
(use-package modus-themes
  :straight t
  :if (display-graphic-p)
  :init
  ;; Add all your customizations prior to loading the themes
  (setq modus-themes-italic-constructs t
        modus-themes-bold-constructs nil
        modus-themes-region '(bg-only no-extend))

  (load-theme 'modus-operandi)
  :bind ("<f6> m" . modus-themes-toggle))
#+end_src

* numpydoc

https://github.com/douglasdavis/numpydoc.el

Adds documentation with =M-x numpydoc-generate=

#+begin_src emacs-lisp
(use-package numpydoc
  :straight t
  :custom
  (numpydoc-insert-return-without-typehint t))
#+end_src

* orderless

#+begin_src emacs-lisp
(use-package orderless
  :straight t
  :init
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
  ;;       orderless-component-separator #'orderless-escapable-split-on-space)
  (setq completion-styles '(orderless)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))

#+end_src

* org mode

Org mode comes with Emacs.

https://orgmode.org/

#+begin_quote
A GNU Emacs major mode for convenient plain text markup — and much more.

Org mode is for keeping notes, maintaining to-do lists, planning projects, authoring documents, computational notebooks, literate programming and more — in a fast and effective plain text system.
#+end_quote

#+begin_src emacs-lisp
(use-package org
  :bind (("C-c a" . org-agenda)
	 ("C-c c" . org-capture)
	 ("C-c l" . org-store-link)
	 :map org-mode-map
	 ;; these two next functions are defined in the :init section
	 ("|" . org-absolute-value)
	 ("<f5> n" . org-noter)
	 ([?\s-j] . org-babel-next-src-block)
	 ([?\s-k] . org-babel-previous-src-block)
	 ([?\s-l] . org-edit-src-code)
	 ("C-M-i" . completion-at-point)
	 :map org-src-mode-map
	 ([?\s-l] . org-edit-src-exit))
  :init
  ;; see https://lists.gnu.org/archive/html/emacs-orgmode/2015-09/msg00118.html
  (defmacro by-backend (&rest body)
    `(cl-case org-export-current-backend ,@body))
  ;; see http://endlessparentheses.com/ispell-and-org-mode.html
  (defun endless/org-ispell ()
    "Configure `ispell-skip-region-alist' for `org-mode'."
    (make-local-variable 'ispell-skip-region-alist)
    (add-to-list 'ispell-skip-region-alist '(org-property-drawer-re))
    (add-to-list 'ispell-skip-region-alist '("~" "~"))
    (add-to-list 'ispell-skip-region-alist '("=" "="))
    (add-to-list 'ispell-skip-region-alist '("^#\\+begin_src" . "^#\\+end_src")))
  (defun org-absolute-value ()
    "Insert || and leave point inside when pressing |"
    (interactive)
    (if (org-inside-LaTeX-fragment-p)
	(progn
	  (insert "||")
	  (backward-char 1))
      (insert "|")))
  (defun my-org-mode-hook ()
    ;; https://emacs.stackexchange.com/a/63581/29
    ;; do not expand abbrevs in org-mode block sources
    (setq abbrev-expand-function (lambda ()
				   (unless (org-in-src-block-p)
				     (abbrev--default-expand))))
    (turn-on-auto-revert-mode)
    (turn-on-org-cdlatex))
  :custom
  (org-beamer-environments-extra
	'(("conjecture"   "j" "\\begin{conjecture}%a%U"   "\\end{conjecture}")
	  ("corollary"   "r" "\\begin{corollary}%a%U"   "\\end{corollary}")
	  ("lemma"       "l" "\\begin{lemma}%a%U"       "\\end{lemma}")
	  ("proposition" "P" "\\begin{proposition}%a%U" "\\end{proposition}")))
  (org-export-with-tags nil)
  (org-file-apps
   '((auto-mode . emacs)
     ("pdf" . "evince %s")))
  (org-format-latex-header (concat org-format-latex-header "\n\\usepackage{lxfonts}"))
  (org-format-latex-options (plist-put org-format-latex-options :scale 2.1))
  (org-hide-emphasis-markers t)
  (org-highlight-latex-and-related '(native))
  (org-latex-listings t)
  (org-log-done 'note)
  (org-return-follows-link t)
  (org-src-preserve-indentation t)
  (org-support-shift-select 'always)
  ;; filter
  (defun replace-math-md (contents backend info)
    (when (eq backend 'md)
      (s-with contents
	(replace-regexp-in-string "\\\\(" "\\\\\\\\(")
	(replace-regexp-in-string "\\\\)" "\\\\\\\\)"))))
  (add-to-list 'org-export-filter-final-output-functions
	       'replace-math-md)
  :config
  (require 'ox-beamer)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((latex . t)
     (python . t)))
  (font-lock-add-keywords
   'org-mode
   '(("^ *\\([-]\\) "
      (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
  (if (display-graphic-p)
      (let* ((variable-tuple
              (cond ((x-list-fonts "Fira Sans") '(:font "Fira Sans"))
                    ((x-family-fonts "Sans Serif") '(:family "Sans Serif"))
                    (nil (warn "Cannot find a Sans Serif Font."))))
             (base-font-color (face-foreground 'default nil 'default))
             (headline `(:inherit default :weight bold :foreground ,base-font-color)))

	(custom-theme-set-faces
	 'user
	 `(org-level-8 ((t (,@headline ,@variable-tuple))))
	 `(org-level-7 ((t (,@headline ,@variable-tuple))))
	 `(org-level-6 ((t (,@headline ,@variable-tuple))))
	 `(org-level-5 ((t (,@headline ,@variable-tuple))))
	 `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.1))))
	 `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.2))))
	 `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.3))))
	 `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.5))))
	 `(org-document-title ((t (,@headline ,@variable-tuple
					      :height 1.75 :underline nil)))))))
  :hook
  (org-mode . my-org-mode-hook)
  (org-mode . endless/org-ispell)
  (org-babel-after-execute . org-redisplay-inline-images))
#+end_src

** ob-sagemath

#+begin_src emacs-lisp
(use-package ob-sagemath
  :straight t
  :after sage-shell-mode)
#+end_src

** org-appear

https://github.com/awth13/org-appear

#+begin_src emacs-lisp
(use-package org-appear
  :straight t
  :init
  (add-hook 'org-mode-hook 'org-appear-mode))
#+end_src

** org-fragtog

#+begin_src emacs-lisp
(use-package org-fragtog
  :straight t
  :init
  (add-hook 'org-mode-hook 'org-fragtog-mode))
#+end_src

** org-noter

https://github.com/weirdNox/org-noter

#+begin_src emacs-lisp
(use-package org-noter
  :straight t
  :custom
  (org-noter-auto-save-last-location t)
  (org-noter-notes-search-path '(my-notes-directory)))
#+end_src

** org-pomodoro

https://github.com/marcinkoziej/org-pomodoro

#+begin_src emacs-lisp
(use-package org-pomodoro
  :straight t)
#+end_src

** org-ref

#+begin_src emacs-lisp
(use-package org-ref
  :straight t)
#+end_src

** org-roam

https://www.orgroam.com/

#+begin_src emacs-lisp
(use-package org-roam
  :straight t
  :init
  (setq org-roam-v2-ack t)
  :bind
  (("C-c n b" . my/org-roam-capture-inbox)
   ("C-c n f" . org-roam-node-find)
   ("C-c n i" . org-roam-node-insert)
   ("C-c n p" . my/org-roam-find-project)
   ("C-c n t" . my/org-roam-capture-task)
   ("C-c n I" . org-roam-node-insert-immediate)
   ("C-c n l" . org-roam-buffer-toggle))
  :custom
  (org-roam-completion-everywhere t)
  (org-roam-directory my-notes-directory)
  :config
  (use-package org-roam-protocol)
  (org-roam-db-autosync-mode)
  (org-roam-setup)
  ;; from systems-crafters
  (defun org-roam-node-insert-immediate (arg &rest args)
    (interactive "P")
    (let ((args (cons arg args))
	  (org-roam-capture-templates (list (append (car org-roam-capture-templates)
						    '(:immediate-finish t)))))
      (apply #'org-roam-node-insert args)))

  (defun my/org-roam-filter-by-tag (tag-name)
    (lambda (node)
      (member tag-name (org-roam-node-tags node))))

  (defun my/org-roam-list-notes-by-tag (tag-name)
    (mapcar #'org-roam-node-file
            (seq-filter
             (my/org-roam-filter-by-tag tag-name)
             (org-roam-node-list))))

  (defun my/org-roam-refresh-agenda-list ()
    (interactive)
    (setq org-agenda-files (my/org-roam-list-notes-by-tag "Project")))

  ;; Build the agenda list the first time for the session
  (my/org-roam-refresh-agenda-list)

  (defun my/org-roam-project-finalize-hook ()
    "Adds the captured project file to `org-agenda-files' if the
capture was not aborted."
    ;; Remove the hook since it was added temporarily
    (remove-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

    ;; Add project file to the agenda list if the capture was confirmed
    (unless org-note-abort
      (with-current-buffer (org-capture-get :buffer)
	(add-to-list 'org-agenda-files (buffer-file-name)))))

  (defun my/org-roam-find-project ()
    (interactive)
    ;; Add the project file to the agenda after capture is finished
    (add-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

    ;; Select a project file to open, creating it if necessary
    (org-roam-node-find
     nil
     nil
     (my/org-roam-filter-by-tag "Project")
     :templates
     '(("p" "project" plain
	"\n* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
	:if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
			   "#+title: ${title}\n#+category: ${title}\n#+filetags: Project")
	:unnarrowed t))))

  (defun my/org-roam-capture-inbox ()
  (interactive)
  (org-roam-capture- :node (org-roam-node-create)
                     :templates '(("i" "inbox" plain "* %?"
                                  :if-new (file+head "Inbox.org" "#+title: Inbox\n")))))

  (defun my/org-roam-capture-task ()
    (interactive)
    ;; Add the project file to the agenda after capture is finished
    (add-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

    ;; Capture the new task, creating the project file if necessary
    (org-roam-capture- :node (org-roam-node-read
                              nil
                              (my/org-roam-filter-by-tag "Project"))
                       :templates '(("p" "project" plain "* TODO %?"
                                     :if-new
				     (file+head+olp "%<%Y%m%d%H%M%S>-${slug}.org"
                                                    "#+title: ${title}\n#+category: ${title}\n#+filetags: Project"
                                                    ("Tasks"))))))

  (add-to-list 'org-roam-capture-templates
	       `("p" "project" plain
		 "\n* Goals\n\n%?\n\n* Tasks\n\n** TODO Add initial tasks\n\n* Dates\n\n"
		 :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
				    "#+title: ${title}\n#+category: ${title}\n#+filetags: Project")
		 :unnarrowed t) t))

;; from https://ag91.github.io/blog/2022/02/05/an-helm-source-for-org-roam-v2/

(defun helm-org-roam (&optional input candidates)
  (interactive)
  (require 'org-roam)
  (helm
   :input input
   :sources (list
             (helm-build-sync-source "Roam: "
               :must-match nil
               :fuzzy-match t
               :candidates (or candidates (org-roam--get-titles))
               :action
               '(("Find File" . (lambda (x)
                                  (--> x
                                       org-roam-node-from-title-or-alias
                                       (org-roam-node-visit it t))))
                 ("Insert link" . (lambda (x)
                                    (--> x
                                         org-roam-node-from-title-or-alias
                                         (insert
                                          (format
                                           "[[id:%s][%s]]"
                                           (org-roam-node-id it)
                                           (org-roam-node-title it))))))
                 ("Follow backlinks" . (lambda (x)
                                         (let ((candidates
                                                (--> x
                                                     org-roam-node-from-title-or-alias
                                                     org-roam-backlinks-get
                                                     (--map
                                                      (org-roam-node-title
                                                       (org-roam-backlink-source-node it))
                                                      it))))
                                           (helm-org-roam nil (or candidates (list x))))))))
             (helm-build-dummy-source
                 "Create note"
               :action '(("Capture note" . (lambda (candidate)
                                             (org-roam-capture-
                                              :node (org-roam-node-create :title candidate)
                                              :props '(:finalize find-file)))))))))
#+end_src

*** org-roam-bibtex

#+begin_src emacs-lisp
(use-package org-roam-bibtex
  :straight t
  :bind (:map org-mode-map
	      (("C-c n a" . orb-note-actions)))
  :init
  (org-roam-bibtex-mode)
  :custom
  (orb-insert-interface 'helm-bibtex)
  (orb-preformat-keywords
   '("citekey" "title" "url" "author-or-editor" "keywords" "file"))
  (orb-process-file-keyword t)
  (orb-file-field-extensions '("pdf"))
  :config
  (add-to-list 'org-roam-capture-templates
      `("r" "bibliography reference" plain
	 (file ,(concat user-emacs-directory "orb-template.org"))
         :if-new
         (file+head "references/${citekey}.org" "#+title: ${title} by ${author-or-editor}\n")) t))
#+end_src

*** org-roam-ui

#+begin_src emacs-lisp
(use-package org-roam-ui
  :straight
    (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
    :after org-roam
;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
;;         a hookable mode anymore, you're advised to pick something yourself
;;         if you don't care about startup time, use
;;  :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+end_src

** org-tree-slide

#+begin_src emacs-lisp
(use-package org-tree-slide
  :straight t)
#+end_src

** org-web-tools

#+begin_src emacs-lisp
(use-package org-web-tools
  :straight t)
#+end_src

** ox-ipynb

#+begin_src emacs-lisp
(use-package ox-ipynb
  :straight
  (:host github :repo "jkitchin/ox-ipynb"))
#+end_src

* pdf-tools

https://github.com/politza/pdf-tools

#+begin_quote
PDF Tools is, among other things, a replacement of DocView for PDF files. The key difference is that pages are not pre-rendered by e.g. ghostscript and stored in the file-system, but rather created on-demand and stored in memory.
#+end_quote

#+begin_src emacs-lisp
(use-package pdf-tools
  :if window-system
  :straight t
  :config
  (pdf-tools-install))
#+end_src

* perspective

https://github.com/nex3/perspective-el

#+begin_src emacs-lisp
(use-package perspective
  :straight t
  :bind
  ("C-x C-b" . persp-list-buffers)   ; or use a nicer switcher, see below
  :config
  (persp-mode))
#+end_src

* projectile

https://github.com/bbatsov/projectile

#+begin_src emacs-lisp
(use-package projectile
  :straight t
  :init
  (projectile-mode +1)
  :bind (:map projectile-mode-map
              ("C-c p" . projectile-command-map)))
#+end_src

* sage-shell-mode

#+begin_src emacs-lisp
(use-package sage-shell-mode
  :straight t)
#+end_src

* smartparens

https://github.com/Fuco1/smartparens

#+begin_quote
Smartparens is a minor mode for dealing with pairs in Emacs.
#+end_quote

#+begin_src emacs-lisp
(use-package smartparens
  :straight t
  :config
  (require 'smartparens-config)
  (smartparens-global-mode 1)
  (show-smartparens-global-mode 1)
  (sp-local-pair 'org-mode "=" "="
		 :unless '(sp-point-after-word-p sp-in-math-p)
		 :post-handlers '(("[d1]" "SPC")))
  (sp-local-pair 'python-mode "``" "``"))
#+end_src

* telega

https://github.com/zevlg/telega.el

#+begin_src emacs-lisp
(use-package telega
  :straight t)
#+end_src

* twittering-mode

https://github.com/hayamiz/twittering-mode

#+begin_src emacs-lisp
(use-package twittering-mode
  :straight
  (:host github :repo "hayamiz/twittering-mode")
  :init
  (defalias 'epa--decode-coding-string 'decode-coding-string)
  :config
  (setq twittering-use-master-password t))
#+end_src

I obtained an error in Emacs 29, and the suggestion in  https://github.com/hayamiz/twittering-mode/issues/154#issue-382570826 fixed it (use =defalias=).

* vertico

#+begin_src emacs-lisp
(use-package vertico
  :straight t
  :init
  (vertico-mode)
  ;; Different scroll margin
  ;; (setq vertico-scroll-margin 0)
  ;; Show more candidates
  ;; (setq vertico-count 20)
  ;; Grow and shrink the Vertico minibuffer
  ;; (setq vertico-resize t)
  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  ;; (setq vertico-cycle t)
  )
#+end_src
* yasnippet

https://github.com/joaotavora/yasnippet

#+begin_quote
YASnippet is a template system for Emacs. It allows you to type an abbreviation and automatically expand it into function templates. Bundled language templates include: C, C++, C#, Perl, Python, Ruby, SQL, LaTeX, HTML, CSS and more. The snippet syntax is inspired from TextMate's syntax, you can even import most TextMate templates to YASnippet.
#+end_quote

Setting =yas-indent-line= to fixed has the effect that the text expanded by a snipped is indented as much as where the snipped is invoked.

#+begin_src emacs-lisp
(use-package yasnippet
  :straight t
  :config
  (yas-global-mode)
  :custom
  (yas-indent-line 'fixed))
#+end_src

Snippets defined here:

| key  | binding | Meaning    |
|------+---------+------------|
| coro | F6 c    | Corollary  |
| defi | F6 d    | Definition |
| lemm | F6 l    | Lemma      |
| proo | F6 p    | Proof      |
| theo | F6 t    | Theorem    |

* warnings

This was needed for the snippets for theorems, (since insertion for labels modifies the buffer). See https://emacs.stackexchange.com/a/24471/29.

#+begin_src emacs-lisp
(use-package warnings
  :straight (:type built-in)
  :after (yasnippet)
  :config
  (add-to-list 'warning-suppress-types '(yasnippet backquote-change)))
#+end_src

* which-key

#+begin_src emacs-lisp
(use-package which-key
  :straight t
  :defer 0.2
  :diminish
  :config
  (which-key-mode))
#+end_src

