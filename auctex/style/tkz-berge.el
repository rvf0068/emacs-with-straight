(TeX-add-style-hook "tkz-berge"
  (function
   (lambda ()
     (TeX-run-style-hooks "tkz-graph")
     (TeX-add-symbols
;     '("Vertex" ["Options"] TeX-arg-tkz-berge-vertex)
     '("Vertices" ["Options"] "List of vertices")
     '("Edge" TeX-arg-tkz-berge-edge)
     '("GraphInit" TeX-arg-tkz-berge-style-vertex)
     '("AddVertexColor" "Color" "Vertices")
     '("EdgeFromOneToAll" "Initial Prefix" "End Prefix"
       "Initial Index" "Amount of Edges")
     '("EdgeFromOneToSeq" "Initial Prefix" "End Prefix"
       "Index of Initial Vertex" "First End Index" "Final End Index")
     '("EdgeFromOneToSel" "Initial Prefix" "End Prefix"
       "Initial Index" "List Of End Indexes")
     '("EdgeInGraphSeq" "Prefix" "First Index" "Last Index (minus one)")
     '("EdgeFromOneToAll" "Initial Prefix" "End Prefix" "Index of Initial Vertex" "Amount of Edges")
     '("AssignVertexLabel" 2)
     '("EdgeIdentity" "Initial Prefix" "End Prefix" "Amount of Edges")
     '("EdgeMod" "Initial Prefix" "End Prefix" "Modulo" "Step")
     '("EdgeDoubleMod" 9)
     '("EdgeInGraphLoop" "Prefix" "Amount of Edges")
     '("EdgeInGraphMod" 3)
     '("EdgeInGraphModLoop" 5)
     '("SetUpVertex")
     '("SetVertexMath")
     '("SetVertexNormal")
     '("SetVertexSimple")
     '("SetVertexArt")
     '("SetVertexShade")
     '("SetVertexNoLabel")
     '("SetVertexLabel")
     '("SetVertexLabelOut")
     '("SetVertexLabeledSmall")
     '("grComplete" [ "Options" ] 1)
     '("grCompleteBipartite" [ "Options" ] 2)
     '("grCycle" [ "Options" ] 1)
     '("grPath" [ "Options" ] 1)
     '("grEmptyPath" [ "Options" ] 1)
     '("grEmptyCycle" [ "Options" ] 1)
     '("grCirculant" [ "Options" ] "Order" "List of Steps")
     '("grLCF" [ "Options" ] "List of Steps" "Repetitions")
     '("grStar" [ "Options" ] 1)
     '("grWheel" [ "Options" ] 1)
     '("grSQCycle" [ "Options" ] 1)
     '("grLadder" [ "Options" ] 1)
     '("grPrism" [ "Options" ] 1)
     '("grTriangularGrid" [ "Options" ] 1)
     '("grHeawood" [ "Options" ])
     '("grGeneralizedPetersen" [ "Options" ] 2)
     '("grStartwo" [ "Options" ] 1)
     '("grPetersen" [ "Options" ])
     '("grTetrahedral"[ "Options" ])
     '("grOctahedral" [ "Options" ] )
     '("grCubicalGraph"[ "Options" ])
     '("grIcosahedral"[ "Options" ])
     '("grDodecahedral"[ "Options" ])
     '("grMobiusKantor" [ "Options" ])
     '("grMobiusLadder" [ "Options" ] 1)
     '("grCocktailParty" [ "Options" ] 1)
     '("grGrid" [ "Options" ] "Horizontal" "Vertical")
     )
     )
   )
  )

;; (defun TeX-arg-tkz-berge-vertex (optional &optional prompt)
;;   "Prompt for label of a vertex."
;;   (let ((lab (read-input "Label: ")))
;;     (insert "(" lab ")")
;;     (indent-according-to-mode)))

;; (defun TeX-arg-tkz-berge-vertex (optional &optional prompt)
;;   "Prompt for label of a vertex."
;;   (let ((lab (read-input "Label: ")))
;;     (insert "{" lab "}")
;;     (indent-according-to-mode)))

(defun TeX-arg-tkz-berge-edge (optional &optional prompt)
  "Prompt for endpoints of an edge."
  (let ((from (read-string "From: "))
        (endpoint (read-string "To: ")))
    (insert "(" from ")")
    (insert "(" endpoint ")")
    (indent-according-to-mode)))

(defun TeX-arg-tkz-berge-style-vertex (optional &optional prompt)
  "Prompt for endpoints of an edge."
  (let ((style (read-string "Style: ")))
    (insert "[vstyle=" style "]")
    (indent-according-to-mode)))


